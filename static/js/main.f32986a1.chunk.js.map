{"version":3,"sources":["components/Button.module.css","components/counter.module.css","reducers/AppReducer.ts","components/Set.tsx","reducers/selector.ts","components/Button.tsx","components/Counter.tsx","App.tsx","serviceWorker.ts","reducers/store.ts","index.tsx","components/set.module.css","App.module.css"],"names":["module","exports","initialState","maxValue","startValue","value","activeMax","activeStart","actionsCreators","type","useDispatch","dispatch","_useDispatch","ac","Set","props","setText","className","s","setPage","inputs","onFocus","setActiveStart","onChange","e","NewStartValue","Number","currentTarget","onChangeStartValue","setActiveMax","NewMaxValue","onChangeMaxValue","button","set","onClick","localStorage","setItem","toString","setValueComponent","selectCounter","state","counter","Button","useSelector","buttonFunction","disabled","disabledButton","title","Counter","textField","red","black","text","knopki","addValue","disabledIncButton","resetValue","disabledResButton","getMinValue","getItem","getMaxValue","App","useEffect","useState","schetchik","setStartValueComponent","setMaxValueComponent","Boolean","window","location","hostname","match","reducers","combineReducers","action","copyState","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,OAAS,yB,sDCA3BD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,UAAY,2BAA2B,OAAS,wBAAwB,MAAQ,uBAAuB,IAAM,uB,8JCW9JC,EAAe,CACfC,SAAS,EACTC,WAAW,EACXC,MAAM,EACNC,WAAU,EACVC,aAAY,GAsCHC,EACM,WACf,MAAO,CAACC,KAAM,gBAFLD,EAII,SAACH,GACd,MAAO,CAACI,KAAM,YAAYJ,UALjBG,EAOkB,SAACH,GAC5B,MAAO,CAACI,KAAM,kBAAkBL,WAAWC,IARlCG,EAUgB,SAACH,GAC1B,MAAO,CAACI,KAAM,gBAAgBJ,UAXrBG,EAaa,SAACH,GACvB,MAAO,CAACI,KAAM,uBAAuBJ,UAd5BG,EAgBe,SAACH,GACzB,MAAO,CAACI,KAAM,yBAAyBJ,UAjB9BG,EAmBG,SAACH,GACT,MAAO,CAACI,KAAM,aAAaJ,UAI5B,SAASK,IACZ,IAAMC,EAAWC,cACjB,OAAO,SAACC,GAAD,OAAoBF,EAASE,IClEjC,IAAMC,EAAM,SAACC,GAChB,IAAIJ,EAAWD,IAGW,IAArBK,EAAMX,YAAoBW,EAAMZ,SAAW,GAAOY,EAAMZ,SAAW,GAAKY,EAAMZ,SAAWY,EAAMX,YAAcW,EAAMX,YAAc,EAAKW,EAAMC,QAAQ,+BAAiCD,EAAMC,QAAQ,oBAuBxM,OAAO,6BACH,yBAAKC,UAAWC,IAAEC,SACd,yBAAKF,UAAWC,IAAEE,QACd,6BACI,8CACA,2BAAOX,KAAK,SAASY,QAAS,kBAAMN,EAAMO,gBAAe,IAAOjB,MAAOU,EAAMX,WACtEmB,SAAU,SAACC,GAAD,OAbN,SAACA,GACxB,IAAIC,EAAgBC,OAAOF,EAAEG,cAActB,OAC3CM,EAASH,EAA4BiB,IACrCd,EAASH,GAAsC,IAC/CG,EAASH,EAAyCiB,IASdG,CAAmBJ,OAE/C,6BACI,gDACA,2BAAOf,KAAK,SAASY,QAAS,kBAAMN,EAAMc,cAAa,IAAOxB,MAAOU,EAAMZ,SACpEoB,SAAU,SAACC,GAAD,OAvBR,SAACA,GACtB,IAAIM,EAAcJ,OAAOF,EAAEG,cAActB,OACzCM,EAASH,EAAuCsB,IAChDnB,EAASH,GAAoC,IAoBTuB,CAAiBP,QAGjD,yBAAKP,UAAWC,IAAEc,QACd,4BAAQf,UAAWC,IAAEe,IAAKC,QAAS,kBAlC3CC,aAAaC,QAAQ,MAAOrB,EAAMZ,SAASkC,YAC3CF,aAAaC,QAAQ,MAAOrB,EAAMX,WAAWiC,YAC7CtB,EAAMuB,kBAAkBvB,EAAMX,YAC9BW,EAAMO,gBAAe,QACrBP,EAAMc,cAAa,KA8BX,W,gBCvDLU,EAAgB,SAACC,GAAD,OAAyBA,EAAMC,S,iBCS7CC,EAAmC,SAAC3B,GAA2B,IACjEV,EAASsC,YAAYJ,GAArBlC,MACP,OAAQ,6BACJ,4BAAQ6B,QAASnB,EAAM6B,eAAgBC,SAAU9B,EAAM+B,eAAezC,GAC9DY,UAAWC,IAAEc,QAASjB,EAAMgC,SCG/BC,EAAU,SAACjC,GAEpB,OAAO,yBAAKE,UAAWC,IAAEuB,SACrB,yBAAKxB,UAAWC,IAAE+B,WACblC,EAAMX,WAAa,GAAKW,EAAMZ,SAAW,GAAKY,EAAMT,WAAaS,EAAMR,YACpE,yBAAKU,UAAWF,EAAMV,QAAUU,EAAMZ,SAAWe,IAAEgC,IAAMhC,IAAEiC,OAAQpC,EAAMqC,MACzE,yBAAKnC,UAAWF,EAAMV,QAAUU,EAAMZ,SAAWe,IAAEgC,IAAMhC,IAAEiC,OAAQpC,EAAMV,QAGjF,yBAAKY,UAAWC,IAAEmC,QACd,kBAAC,EAAD,CAAQT,eAAgB7B,EAAMuC,SAAUR,eAAgB/B,EAAMwC,kBAAmBR,MAAO,QACxF,kBAAC,EAAD,CAAQH,eAAgB7B,EAAMyC,WAAYV,eAAgB/B,EAAM0C,kBAAmBV,MAAO,aCpB3FW,EAA4BvB,aAAawB,QAAQ,OACjDC,EAA4BzB,aAAawB,QAAQ,OA8E7CE,MA3Ef,WAEI,IAAIlD,EAAWD,IACfoD,qBAAU,WACFJ,GAAeE,IACfjD,EAASH,GAA0CkD,IACnD/C,EAASH,GAAwCoD,OAEtD,IARQ,MASmDjB,YAAYJ,GAAnElC,EATI,EASJA,MAAOE,EATH,EASGA,YAAaD,EAThB,EASgBA,UAAWF,EAT3B,EAS2BA,WAAYD,EATvC,EASuCA,SATvC,EAUW4D,mBAAQ,+BAVnB,mBAUNX,EAVM,KAUApC,EAVA,KA8CX,OACI,yBAAKC,UAAWC,IAAE8C,WACd,yBAAK/C,UAAWC,IAAEe,KACd,kBAAC,EAAD,CAAKK,kBArCC,WACd3B,EAASH,EAA4BH,KAqCxB4D,uBA1Bc,SAAC5D,GAC5BM,EAASH,EAAyCH,KA0BrC6D,qBAxBY,SAAC7D,GAC1BM,EAASH,EAAuCH,KAwBnCF,SAAUA,EACVC,WAAYA,EACZyB,aAxBS,SAACxB,GACvBM,EAASH,EAAoCH,KAwBhCiB,eAtBW,SAACjB,GACzBM,EAASH,EAAsCH,KAsBlCW,QAASA,KAElB,yBAAKC,UAAWC,IAAEuB,SACd,kBAAC,EAAD,CAASpC,MAAOA,EACPF,SAAUA,EACVmD,SA3CJ,WAETjD,GAASD,GAAcC,GAASF,GAChCQ,EAASH,EAA2BH,KAyCvBmD,WA/CF,WACf7C,EAASH,MA+CQJ,WAAYA,EACZE,UAAWA,EACXC,YAAaA,EACb6C,KAAMA,EACNG,kBA5BK,SAAClD,GACvB,QAASA,GAAS,GAAKA,EAAQF,GAAYE,GAASD,IAAgBE,IAAcC,IA4BjEkD,kBA1BK,SAACpD,GACvB,OAAOA,GAAS,QC5CJ8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCfFC,EAAWC,YAAgB,CAC3BhC,QPkBsB,WAA8D,IAA7DD,EAA4D,uDAAtCtC,EAAcwE,EAAwB,uCACnF,OAAQA,EAAOjE,MACX,IAAK,cACD,OAAO,eAAI+B,EAAX,CACAnC,MAAM,IACV,IAAK,YACD,OAAO,eAAImC,EAAX,CACInC,MAAMqE,EAAOrE,MAAQ,IAC7B,IAAK,kBACD,OAAO,eAAImC,EAAX,CACIpC,WAAWsE,EAAOtE,aAC1B,IAAK,gBACD,OAAO,eAAIoC,EAAX,CACIrC,SAASuE,EAAOrE,QACxB,IAAK,uBACD,OAAO,eAAImC,EAAX,CACIlC,UAAUoE,EAAOrE,QACzB,IAAK,yBACD,OAAO,eAAImC,EAAX,CACIjC,YAAYmE,EAAOrE,QAC3B,IAAK,aACD,IAAIsE,EAAS,eAAOnC,GAMpB,OALAL,aAAaC,QAAQ,MAAOuC,EAAUxE,SAASkC,YAC/CF,aAAaC,QAAQ,MAAOuC,EAAUvE,WAAWiC,YACjDsC,EAAUtE,MAAQqE,EAAOrE,MACzBsE,EAAUpE,aAAc,EACxBoE,EAAUrE,WAAW,EACdqE,EACX,QACI,OAAOnC,MO5CNoC,EAAeC,YAAYL,GAIxCJ,OAAOQ,MAAQA,ECHfE,IAASC,OACH,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,OAGRI,SAASC,eAAe,SF8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBGhJ5B3F,EAAOC,QAAU,CAAC,QAAU,qBAAqB,IAAM,iBAAiB,OAAS,oBAAoB,OAAS,sB,kBCA9GD,EAAOC,QAAU,CAAC,UAAY,uBAAuB,QAAU,qBAAqB,IAAM,oB","file":"static/js/main.f32986a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1kiFv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"counter_counter__2Suoj\",\"textField\":\"counter_textField__GVqd0\",\"knopki\":\"counter_knopki__4vNKA\",\"black\":\"counter_black__3ZC7n\",\"red\":\"counter_red__1K4Qs\"};","import {useDispatch as _useDispatch} from \"react-redux\";\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof actionsCreators.resetValueAC>\r\n    | ReturnType<typeof actionsCreators.addValueAC>\r\n    | ReturnType<typeof actionsCreators.setStartValueComponentAC>\r\n    | ReturnType<typeof actionsCreators.setMaxValueComponentAC>\r\n    | ReturnType<typeof actionsCreators.setActiveMaxValueAC>\r\n    | ReturnType<typeof actionsCreators.setActiveStartValueAC>\r\n    | ReturnType<typeof actionsCreators.setValuesAC>\r\n\r\n\r\nlet initialState = {\r\n    maxValue:1,\r\n    startValue:0,\r\n    value:0,\r\n    activeMax:true,\r\n    activeStart:true\r\n}\r\n\r\nexport type InitStateType = typeof initialState\r\n\r\nexport const appReducer = (state:InitStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'RESET-VALUE':\r\n            return {...state,\r\n            value:0}\r\n        case 'ADD-VALUE':\r\n            return {...state,\r\n                value:action.value + 1}\r\n        case 'SET-START-VALUE':\r\n            return {...state,\r\n                startValue:action.startValue}\r\n        case 'SET-MAX-VALUE':\r\n            return {...state,\r\n                maxValue:action.value}\r\n        case 'SET-ACTIVE-MAX-VALUE':\r\n            return {...state,\r\n                activeMax:action.value}\r\n        case 'SET-ACTIVE-START-VALUE':\r\n            return {...state,\r\n                activeStart:action.value}\r\n        case 'SET-VALUES':\r\n            let copyState = {...state}\r\n            localStorage.setItem('max', copyState.maxValue.toString());\r\n            localStorage.setItem('min', copyState.startValue.toString())\r\n            copyState.value = action.value\r\n            copyState.activeStart = false\r\n            copyState.activeMax= false\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actionsCreators = {\r\n    resetValueAC : () => {\r\n    return {type: 'RESET-VALUE'} as const\r\n},\r\n    addValueAC : (value: number) => {\r\n    return {type: 'ADD-VALUE',value} as const\r\n},\r\n    setStartValueComponentAC : (value: number) => {\r\n    return {type: 'SET-START-VALUE',startValue:value} as const\r\n},\r\n    setMaxValueComponentAC : (value: number) => {\r\n    return {type: 'SET-MAX-VALUE',value} as const\r\n},\r\n    setActiveMaxValueAC : (value: boolean) => {\r\n    return {type: 'SET-ACTIVE-MAX-VALUE',value} as const\r\n},\r\n    setActiveStartValueAC : (value: boolean) => {\r\n    return {type: 'SET-ACTIVE-START-VALUE',value} as const\r\n},\r\n    setValuesAC:(value: number)=>{\r\n        return {type: 'SET-VALUES',value} as const\r\n    },\r\n}\r\n\r\nexport function useDispatch() {\r\n    const dispatch = _useDispatch()\r\n    return (ac: ActionsType)=> dispatch(ac)\r\n}\r\n\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from \"./set.module.css\"\r\nimport {actionsCreators, useDispatch} from \"../reducers/AppReducer\";\r\n\r\ntype propsTypeSet = {\r\n    setValueComponent: (value: number) => void\r\n    setStartValueComponent: (value: number) => void\r\n    setMaxValueComponent: (value: number) => void\r\n    maxValue: number\r\n    startValue: number\r\n    setActiveStart: (value: boolean) => void\r\n    setActiveMax: (value: boolean) => void\r\n    setText: (text: string) => void\r\n}\r\n\r\nexport const Set = (props: propsTypeSet) => {\r\n    let dispatch = useDispatch()\r\n\r\n    {\r\n        (props.startValue === 0 && props.maxValue > 0) || (props.maxValue > 0 && props.maxValue > props.startValue && props.startValue >= 0) ? props.setText(\"enter value and press 'set'\") : props.setText(\"Incorrect value!\")\r\n    }\r\n\r\n    const setValues = () => {\r\n        localStorage.setItem('max', props.maxValue.toString());\r\n        localStorage.setItem('min', props.startValue.toString());\r\n        props.setValueComponent(props.startValue)\r\n        props.setActiveStart(false)\r\n        props.setActiveMax(false)\r\n    }\r\n\r\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let NewMaxValue = Number(e.currentTarget.value)\r\n        dispatch(actionsCreators.setMaxValueComponentAC(NewMaxValue))\r\n        dispatch(actionsCreators.setActiveMaxValueAC(true))\r\n    }\r\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let NewStartValue = Number(e.currentTarget.value)\r\n        dispatch(actionsCreators.setValuesAC(NewStartValue))\r\n        dispatch(actionsCreators.setActiveStartValueAC(true))\r\n        dispatch(actionsCreators.setStartValueComponentAC(NewStartValue))\r\n    }\r\n\r\n    return <div>\r\n        <div className={s.setPage}>\r\n            <div className={s.inputs}>\r\n                <div>\r\n                    <span>Start value:</span>\r\n                    <input type=\"number\" onFocus={() => props.setActiveStart(true)} value={props.startValue}\r\n                           onChange={(e) => onChangeStartValue(e)}/>\r\n                </div>\r\n                <div>\r\n                    <span>Maximum value:</span>\r\n                    <input type=\"number\" onFocus={() => props.setActiveMax(true)} value={props.maxValue}\r\n                           onChange={(e) => onChangeMaxValue(e)}/>\r\n                </div>\r\n            </div>\r\n            <div className={s.button}>\r\n                <button className={s.set} onClick={() => setValues()}>Set</button>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n}","import { AllStateType } from \"./store\";\r\n\r\nexport let selectCounter = (state: AllStateType) => state.counter","import React, {FC} from \"react\";\r\nimport {selectCounter} from \"../reducers/selector\";\r\nimport {useSelector} from \"react-redux\";\r\nimport s from \"./Button.module.css\"\r\n\r\nexport type ButtonPropsType = {\r\n    title: string\r\n    buttonFunction: () => void\r\n    disabledButton: (value: number) => boolean\r\n}\r\n\r\nexport const Button:React.FC<ButtonPropsType> = (props:ButtonPropsType) => {\r\n    const {value} = useSelector(selectCounter);\r\n    return  <div>\r\n        <button onClick={props.buttonFunction} disabled={props.disabledButton(value)}\r\n                className={s.button}>{props.title}</button>\r\n    </div>\r\n}","import s from \"./counter.module.css\"\r\nimport React from \"react\";\r\nimport {Button} from \"./Button\";\r\n\r\ntype propsTypeCounter = {\r\n    maxValue: number\r\n    value: number\r\n    addValue: () => void\r\n    startValue: number\r\n    resetValue: () => void\r\n    activeStart: boolean\r\n    activeMax: boolean\r\n    text: string\r\n    disabledIncButton: (value: number) => boolean\r\n    disabledResButton: (value: number) => boolean\r\n}\r\n\r\n\r\nexport const Counter = (props: propsTypeCounter) => {\r\n\r\n    return <div className={s.counter}>\r\n        <div className={s.textField}>\r\n            {props.startValue < 0 || props.maxValue < 0 || props.activeMax || props.activeStart ?\r\n                <div className={props.value === props.maxValue ? s.red : s.black}>{props.text}</div> :\r\n                <div className={props.value === props.maxValue ? s.red : s.black}>{props.value}</div>\r\n            }\r\n        </div>\r\n        <div className={s.knopki}>\r\n            <Button buttonFunction={props.addValue} disabledButton={props.disabledIncButton} title={\"Inc\"}/>\r\n            <Button buttonFunction={props.resetValue} disabledButton={props.disabledResButton} title={\"Reset\"}/>\r\n        </div>\r\n    </div>\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport s from './App.module.css';\nimport {Set} from \"./components/Set\"\nimport {Counter} from \"./components/Counter\";\nimport {actionsCreators, useDispatch} from \"./reducers/AppReducer\";\nimport {useSelector} from \"react-redux\";\nimport {selectCounter} from \"./reducers/selector\";\n\ntype getValueType = string | null\nexport let getMinValue: getValueType = localStorage.getItem('min')\nexport let getMaxValue: getValueType = localStorage.getItem('max')\n\n\nfunction App() {\n\n    let dispatch = useDispatch()\n    useEffect(() => {\n        if (getMinValue && getMaxValue) {\n            dispatch(actionsCreators.setStartValueComponentAC(+getMinValue))\n            dispatch(actionsCreators.setMaxValueComponentAC(+getMaxValue))\n        }\n    }, [])\n    const {value, activeStart, activeMax, startValue, maxValue} = useSelector(selectCounter)\n    let [text, setText] = useState<string>(`enter value and press 'set'`)\n\n    const setValues = () => {\n        dispatch(actionsCreators.setValuesAC(value))\n    }\n    const resetValue = () => {\n        dispatch(actionsCreators.resetValueAC())\n    }\n    const addValue = () => {\n\n        if (value >= startValue && value <= maxValue) {\n            dispatch(actionsCreators.addValueAC(value))\n        }\n    }\n    const setStartValueComponent = (value: number) => {\n        dispatch(actionsCreators.setStartValueComponentAC(value))\n    }\n    const setMaxValueComponent = (value: number) => {\n        dispatch(actionsCreators.setMaxValueComponentAC(value))\n    }\n    const setActiveMaxValue = (value: boolean) => {\n        dispatch(actionsCreators.setActiveMaxValueAC(value))\n    }\n    const setActiveStartValue = (value: boolean) => {\n        dispatch(actionsCreators.setActiveStartValueAC(value))\n    }\n    const disabledSetButton = (value: number) => {\n        return !(maxValue && startValue >= 0 && maxValue > startValue && maxValue !== startValue && maxValue > 0 && startValue >= 0);\n    }\n    const disabledIncButton = (value: number) => {\n        return !(value >= 0 && value < maxValue && value >= startValue && (!activeMax && !activeStart));\n    }\n    const disabledResButton = (value: number) => {\n        return value <= 0;\n    }\n\n    return (\n        <div className={s.schetchik}>\n            <div className={s.set}>\n                <Set setValueComponent={setValues}\n                     setStartValueComponent={setStartValueComponent}\n                     setMaxValueComponent={setMaxValueComponent}\n                     maxValue={maxValue}\n                     startValue={startValue}\n                     setActiveMax={setActiveMaxValue}\n                     setActiveStart={setActiveStartValue}\n                     setText={setText}/>\n            </div>\n            <div className={s.counter}>\n                <Counter value={value}\n                         maxValue={maxValue}\n                         addValue={addValue}\n                         resetValue={resetValue}\n                         startValue={startValue}\n                         activeMax={activeMax}\n                         activeStart={activeStart}\n                         text={text}\n                         disabledIncButton={disabledIncButton}\n                         disabledResButton={disabledResButton}/>\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore, Store} from \"redux\";\r\nimport {appReducer} from \"./AppReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    counter: appReducer\r\n})\r\nexport type AllStateType = ReturnType<typeof reducers>\r\nexport const store: Store = createStore(reducers)\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./reducers/store\";\n\nReactDOM.render(\n      <Provider store={store}>\n          <App />\n      </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setPage\":\"set_setPage__2DeKq\",\"set\":\"set_set__wqM8e\",\"button\":\"set_button__2MaWO\",\"inputs\":\"set_inputs__ES_fE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"schetchik\":\"App_schetchik__1nmSp\",\"counter\":\"App_counter__2eGEU\",\"set\":\"App_set__2xFN0\"};"],"sourceRoot":""}